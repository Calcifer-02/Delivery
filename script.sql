-- MySQL Script generated by MySQL Workbench
-- Fri Apr  5 23:46:45 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`organization_zmn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`organization_zmn` ;

CREATE TABLE IF NOT EXISTS `mydb`.`organization_zmn` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `address` VARCHAR(1000) NOT NULL,
  `contacts` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

INSERT INTO organization_zmn(name, address, contacts) 
VALUES 
('Pizza Delivery', 'г. Санкт-Петербург, наб. Обводного канала, д. 161', '8-800-123-45-56'),
('Burgers Delivery', 'г. Санкт-Петербург, пр-кт Московский, д. 117', '8-800-456-78-90'),
('Sushi Delivery', 'г. Санкт-Петербург, пр-кт Измайловский, д. 24', '8-800-234-56-78');

-----------------------------------------------------
-- Table `mydb`.`restaurant_zmn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`restaurant_zmn` ;

CREATE TABLE IF NOT EXISTS `mydb`.`restaurant_zmn` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `address` VARCHAR(1000) NOT NULL,
  `menu` VARCHAR(1000) NOT NULL, 
  `organization_id` INT NOT NULL,
  PRIMARY KEY (`id`, `organization_id`),
  INDEX `fk_restaurant_zmn_organization_zmn1_idx` (`organization_id` ASC) VISIBLE,
  CONSTRAINT `fk_restaurant_zmn_organization_zmn1`
    FOREIGN KEY (`organization_id`)
    REFERENCES `mydb`.`organization_zmn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

INSERT INTO restaurant_zmn(name, address, menu, organization_id) 
VALUES 
('Pizza Delivery', 'г. Санкт-Петербург, наб. Обводного канала, д. 161', 'Пепперони, Маргарита, Цыпленок карри, Сырный цыпленок, 4 сыра, Барбекю с халапенью, Ассорти, Гавайская, салат Цезарь, салат Греческий, Картофель фри, Картофель по-деревенски, Наггетсы 9 штук', 1),
('Burgers Delivery', 'г. Санкт-Петербург, пр-кт Московский, д. 117', 'Чизбургер, Гамбургер, Американец, Мексиканец, Сырбургер, Фермерский, BBQбургер, Чиличилл, Вегетарианец, салат Коул-слоу, салат Овощной, Картофель фри', 2), 
('Sushi Delivery', 'г. Санкт-Петербург, пр-кт Измайловский, д. 24', 'Филадельфия, Калифорния, Унаги маки, Самурай, Татаки гребешок, Угорь темпура, Райден, Камикадзе, Филадельфия запеченая, Соус соевый, Соус унаги, Имбирь маринованный, Васаби', 3);

-- -----------------------------------------------------
-- Table `mydb`.`delivery_zmn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`delivery_zmn` ;

CREATE TABLE IF NOT EXISTS `mydb`.`delivery_zmn` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `couriers` INT NOT NULL DEFAULT(0),
  `contacts` VARCHAR(45) NOT NULL,
  `organization_id` INT NOT NULL,
  PRIMARY KEY (`id`, `organization_id`),
  INDEX `fk_delivery_zmn_organization_zmn1_idx` (`organization_id` ASC) VISIBLE,
  CONSTRAINT `fk_delivery_zmn_organization_zmn1`
    FOREIGN KEY (`organization_id`)
    REFERENCES `mydb`.`organization_zmn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

INSERT INTO delivery_zmn(couriers, contacts, organization_id) 
VALUES 
(5, '8-800-123-45-56', 1),
(5, '8-800-456-78-90', 2), 
(5, '8-800-234-56-78', 3);

-- -----------------------------------------------------
-- Table `mydb`.`dish_zmn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`dish_zmn` ;

CREATE TABLE IF NOT EXISTS `mydb`.`dish_zmn` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` VARCHAR(400) NOT NULL DEFAULT(''),
  `price` VARCHAR(15) NOT NULL,
  `restaurant_id` INT NOT NULL,
  PRIMARY KEY (`id`, `restaurant_id`),
  INDEX `fk_dish_zmn_restaurant_zmn_idx` (`restaurant_id` ASC) VISIBLE,
  CONSTRAINT `fk_dish_zmn_restaurant_zmn`
    FOREIGN KEY (`restaurant_id`)
    REFERENCES `mydb`.`restaurant_zmn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

INSERT INTO dish_zmn(name, description, price, restaurant_id) 
VALUES 
('Пепперони', 'пепперони, сыр моцарелла, соус томатный', '925, 695', 1),
('Маргарита', 'помидоры, орегано, сыр моцарелла, соус томатный, соус маджорио', '895, 605', 1), 
('Цыпленок карри', 'соус карри, халапеньо, куриное филе, ананас, сыр моцарелла, помидоры, соус томатный, лук красный', '925, 695', 1),
('Сырный цыпленок', 'сыр моцарелла, соус маджорио, куриное филе, сыр дор блю, сыр чеддер', '965, 725', 1),
('4 сыра', 'сыр дор блю, сыр чеддер, сыр моцарелла, сыр пармезан', '925, 695', 1),
('Барбекю с халапенью', 'ветчина, бекон, свинина, сыр моцарелла, халапеньо, соус барбекю', '925, 695', 1),
('Ассорти', 'сервелат, шампиньоны, помидоры, сыр моцарелла, соус томатный, соус маджорио, укроп', '925, 695', 1),
('Гавайская', 'куриное филе, ананас, болгарский перец, помидоры, сыр моцарелла, соус маджорио', '925, 695', 1),
('салат Цезарь', 'пекинская капуста, майонез, сыр пармезан, сухарики, курица, помидоры, соус цезарь', '250', 1),
('салат Греческий', 'помидоры, пекинская капуста, маслины, огурцы, специи, болгарский перец, красный лук, сыр фетакса, заправка', '250', 1),
('Картофель фри', 'Всеми любимая закуска и отличное дополнение к любому блюду', '220', 1),
('Картофель по-деревенски', 'Ароматный картофель с хрустящей корочкой', '220', 1),
('Наггетсы 9 штук', 'Нежное куриное филе в панировке', '170', 1),
('Чизбургер', 'Мраморная говядина, сыр чеддер, сырный соус, кетчуп, маринованные огурцы, свежий салат и томаты', '360', 2),
('Гамбургер', 'Мраморная говядина, маринованные огурцы, красный лук, кетчуп и горчичный соус', '300', 2),
('Американец', 'Большая котлета из мраморной говядины, сыр «Чеддер», красный лук, томаты, карамелизированный лук', '770', 2),
('Мексиканец', 'Мраморная говядина, соус гуакомоле, красный лук, бекон, перец халапеньо, картофельные чипсы и томат', '700', 2),
('Сырбургер', 'Большая сырная котлета, мраморная говядина, хрустящий салат, маринованные огурцы, спелые томаты, лук фри и авторский горчичный соус', '750', 2),
('Фермерский', 'Мраморное мясо, бекон, яйцо-скрембл, хрустящий салат, маринованные огурцы, лук фри, томаты, соус «айоли»', '700', 2),
('BBQбургер', 'Мраморная говядина, копченый соус барбекю, бекон, красный лук, спелые томаты, пряная красная капуста', '700', 2),
('Чиличилл', 'Большая котлета из мраморной говядины, сыр «Чеддер», красный лук, томаты, карамелизированный лук', '770', 2),
('Вегетарианец', 'Печеный перец, жареный баклажан, кабачок, хрустящий салат, маринованные огурцы, томаты, сыр «Чеддер», соус «васаби»', '580', 2),
('салат Коул-слоу', 'Капуста, морковь, сельдерей, яблоки, домашний майонез и грецкие орехи', '270', 2),
('салат Овощной', 'Огурцы, томаты, болгарский перец, салат айсберг, заправленные оливковым маслом', '380', 2),
('Картофель фри', 'Хрустящий картофель фри, обжаренный во фритюре', '230', 2),
('Филадельфия', 'Лосось, рис, водоросли нори, сливочный сыр, огурец', '500', 3),
('Калифорния', 'Снежный краб, огурец, рис, водоросли нори, авокадо, сливочный сыр, икра масаго', '400', 3),
('Унаги маки', 'Угорь, рис, водоросли нори, соус унаги, кунжут', '370', 3),
('Самурай', 'Красная рыба, рис, водоросли нори, тамаго, окунь, соусы спайси и унаги', '380', 3),
('Татаки гребешок', 'Гребешок, рис, водоросли нори, угорь, авокадо, сливочный сыр, зелёный лук, соусы айоли устричный и унаги, снэки нори', '400', 3),
('Угорь темпура', 'Угорь, кларий, авокадо, рис, водоросли нори, сливочный сыр, кляр, сухари панко, кунжут, зелёный лук, соус унаги', '430', 3),
('Райден', 'Лосось, рис, водоросли нори, тамаго, креветки темпура, сливочный сыр, чука, соусы унаги и спайси, зелёный лук', '500', 3),
('Камикадзе', 'Креветки, мидии, рис, водоросли нори, соусы спайси и унаги, чёрный кунжут', '500', 3),
('Криспи', 'Окунь темпура, угорь, битые огурцы, лук фри, снеки нори, сливочный сыр, кляр, рис, водоросли нори, соусы устричный, унаги, сладкий чили и айоли, сухари панко', '660', 3),
('Соус соевый', '', '20', 3),
('Соус унаги', '', '50', 3),
('Имбирь маринованный', '', '50', 3),
('Васаби', '', '40', 3);

-- -----------------------------------------------------
-- Table `mydb`.`client_zmn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`client_zmn` ;

CREATE TABLE IF NOT EXISTS `mydb`.`client_zmn` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `contacts` VARCHAR(100) NOT NULL,
  `address` VARCHAR(200) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

INSERT INTO client_zmn(contacts, address) 
VALUES 
('Максим Золотков, 8-999-999-99-99', 'г. Санкт-Петербург, пр-кт Московский, д. 60'),
('Иван Иванов, 8-123-456-78-90', 'г. Санкт-Петербург, пр-кт Большевиков, д. 14');

-- -----------------------------------------------------
-- Table `mydb`.`order_zmn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`order_zmn` ;

CREATE TABLE IF NOT EXISTS `mydb`.`order_zmn` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `date` VARCHAR(50) NOT NULL,
  `status` ENUM('РАЗМЕЩЕН', 'ПРИНЯТ', 'ГОТОВИТСЯ', 'В ДОСТАВКЕ', 'ДОСТАВЛЕН') NOT NULL,
  `address` VARCHAR(200) NOT NULL,
  `dishes` VARCHAR(1000) NOT NULL,
  `organization_id` INT NOT NULL,
  `delivery_id` INT NOT NULL,
  `client_id` INT NOT NULL,
  PRIMARY KEY (`id`, `client_id`),
  INDEX `fk_order_zmn_organization_zmn1_idx` (`organization_id` ASC) VISIBLE,
  INDEX `fk_order_zmn_delivery_zmn1_idx` (`delivery_id` ASC) VISIBLE,
  INDEX `fk_order_zmn_client_zmn1_idx` (`client_id` ASC) VISIBLE,
  CONSTRAINT `fk_order_zmn_organization_zmn1`
    FOREIGN KEY (`organization_id`)
    REFERENCES `mydb`.`organization_zmn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_order_zmn_delivery_zmn1`
    FOREIGN KEY (`delivery_id`)
    REFERENCES `mydb`.`delivery_zmn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_order_zmn_client_zmn1`
    FOREIGN KEY (`client_id`)
    REFERENCES `mydb`.`client_zmn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

INSERT INTO order_zmn(date, status, address, dishes, organization_id, delivery_id, client_id) 
VALUES 
('2024-04-08', 'ГОТОВИТСЯ', 'г. Санкт-Петербург, пр-кт Московский, д. 60', 'Пепперони, салат Цезарь, Картофель по-деревенски, Наггетсы 9 штук', 1, 1, 1),
('2024-04-08', 'В ДОСТАВКЕ', 'г. Санкт-Петербург, пр-кт Большевиков, д. 14', 'BBQбургер, Гамбургер, салат Коул-слоу, Картофель фри', 2, 2, 2);

-- -----------------------------------------------------
-- Table `mydb`.`order_zmn_has_dish_zmn`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`order_zmn_has_dish_zmn` ;

CREATE TABLE IF NOT EXISTS `mydb`.`order_zmn_has_dish_zmn` (
  `order_id` INT NOT NULL,
  `dish_id` INT NOT NULL,
  `dish_price` INT NOT NULL,
  `dish_count` INT NOT NULL,
  PRIMARY KEY (`order_id`, `dish_id`),
  INDEX `fk_order_zmn_has_dish_zmn_dish_zmn1_idx` (`dish_id` ASC) VISIBLE,
  INDEX `fk_order_zmn_has_dish_zmn_order_zmn1_idx` (`order_id` ASC) VISIBLE,
  CONSTRAINT `fk_order_zmn_has_dish_zmn_order_zmn1`
    FOREIGN KEY (`order_id`)
    REFERENCES `mydb`.`order_zmn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_order_zmn_has_dish_zmn_dish_zmn1`
    FOREIGN KEY (`dish_id`)
    REFERENCES `mydb`.`dish_zmn` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

INSERT INTO order_zmn_has_dish_zmn(order_id, dish_id, dish_price, dish_count)
VALUES 
(1, 1, 925, 1),
(1, 9, 250, 1),
(1, 12, 220, 2),
(1, 13, 170, 1),
(2, 20, 700, 2),
(2, 15, 300, 1),
(2, 23, 270, 1),
(2, 25, 230, 2);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
